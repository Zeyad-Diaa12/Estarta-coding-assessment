version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: employeedb
    environment:
      POSTGRES_DB: employeedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: employee-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    volumes:
      - redis_data:/data

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: employee-status-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Default=Host=postgres;Port=5432;Database=employeedb;Username=postgres;Password=postgres123
      - Redis__Connection=redis:6379
      - Api__Token=secure-api-token-2025
      - Cache__TtlMinutes=10
      - Status__GreenThreshold=2000
      - Status__OrangeThreshold=2000
      - Tax__Threshold=10000
      - Tax__Rate=0.07
    ports:
      - "5000:80"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
